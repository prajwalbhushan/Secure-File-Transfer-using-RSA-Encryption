#include<stdio.h>
#include<stdlib.h>
#include<sys/socket.h>
#include<sys/types.h>
#include<netinet/in.h>
#include<error.h>
#include<strings.h>
#include<unistd.h>
#include<arpa/inet.h>
#define ERROR    -1
#define MAX_CLIENTS    2
#define MAX_DATA    1024
#define BUFFER 1024
main(int argc, char **argv)
{
    struct sockaddr_in server;
    struct sockaddr_in client;
    int sock;
    int new,i;
    int sockaddr_len = sizeof(struct sockaddr_in);
    int data_len;
   char data[MAX_DATA];
   char reply[MAX_DATA];
   char temp[MAX_DATA];
    if((sock = socket(AF_INET, SOCK_STREAM, 0)) == ERROR)
    {
        perror("server socket: ");
        exit(-1);
    }
        
    server.sin_family = AF_INET;
    server.sin_port = htons(atoi(argv[1]));
    server.sin_addr.s_addr = INADDR_ANY;
    bzero(&server.sin_zero, 8);            
    if((bind(sock, (struct sockaddr *)&server, sockaddr_len)) == ERROR)
    {
        perror("bind : ");
        exit(-1);
    }    
    if((listen(sock, MAX_CLIENTS)) == ERROR)
    {
        perror("listen");
        exit(-1);
    }
    printf("\nThe TCPServer Waiting for client on port %d\n",ntohs(server.sin_port));
        fflush(stdout);
    
    while(1) // Better signal handling required
    {
        if((new = accept(sock, (struct sockaddr *)&client, &sockaddr_len)) == ERROR)
        {
            perror("accept");
            exit(-1);
        }
        
        printf("New Client connected from port no %d and IP %s\n", ntohs(client.sin_port), inet_ntoa(client.sin_addr));
	printf("Please Wait for client to request... \n\n");
        data_len = 1;  
                
        while(data_len)
        {
            
	    data_len = recv(new, data, MAX_DATA, 0);
            printf("\nRecieved message from client: %s", data);
            
            if(data_len)
          {
           
		printf("Enter reply: ");
		fgets(reply, BUFFER, stdin);          
		send(new, reply, MAX_DATA, 0);					    
            }
        }
        printf("Client disconnected\n");        
        close(new);
        
    }

    close(sock);        
}
